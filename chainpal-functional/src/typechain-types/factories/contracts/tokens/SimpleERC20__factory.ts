/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SimpleERC20,
  SimpleERC20Interface,
} from "../../../contracts/tokens/SimpleERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimal",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals_",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610aa4380380610aa483398101604081905261002f91610123565b8282600361003d838261022f565b50600461004a828261022f565b50506005805460ff191660ff9390931692909217909155506102ed915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261009157600080fd5b81516001600160401b038111156100aa576100aa61006a565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d8576100d861006a565b6040528181528382016020018510156100f057600080fd5b60005b8281101561010f576020818601810151838301820152016100f3565b506000918101602001919091529392505050565b60008060006060848603121561013857600080fd5b83516001600160401b0381111561014e57600080fd5b61015a86828701610080565b602086015190945090506001600160401b0381111561017857600080fd5b61018486828701610080565b925050604084015160ff8116811461019b57600080fd5b809150509250925092565b600181811c908216806101ba57607f821691505b6020821081036101da57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561022a57806000526020600020601f840160051c810160208510156102075750805b601f840160051c820191505b818110156102275760008155600101610213565b50505b505050565b81516001600160401b038111156102485761024861006a565b61025c8161025684546101a6565b846101e0565b6020601f82116001811461029057600083156102785750848201515b600019600385901b1c1916600184901b178455610227565b600084815260208120601f198516915b828110156102c057878501518255602094850194600190920191016102a0565b50848210156102de5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6107a8806102fc6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806340c10f191161007157806340c10f191461012d57806370a082311461014257806395d89b411461016b578063a9059cbb14610173578063dd62ed3e14610186578063f785ef72146101bf57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101cc565b6040516100c391906105f1565b60405180910390f35b6100df6100da36600461065b565b61025e565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610685565b610278565b60055460ff165b60405160ff90911681526020016100c3565b61014061013b36600461065b565b61029c565b005b6100f36101503660046106c2565b6001600160a01b031660009081526020819052604090205490565b6100b66102aa565b6100df61018136600461065b565b6102b9565b6100f36101943660046106e4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055461011b9060ff1681565b6060600380546101db90610717565b80601f016020809104026020016040519081016040528092919081815260200182805461020790610717565b80156102545780601f1061022957610100808354040283529160200191610254565b820191906000526020600020905b81548152906001019060200180831161023757829003601f168201915b5050505050905090565b60003361026c8185856102c7565b60019150505b92915050565b6000336102868582856102d9565b61029185858561035d565b506001949350505050565b6102a682826103bc565b5050565b6060600480546101db90610717565b60003361026c81858561035d565b6102d483838360016103f2565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811015610357578181101561034857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064015b60405180910390fd5b610357848484840360006103f2565b50505050565b6001600160a01b03831661038757604051634b637e8f60e11b81526000600482015260240161033f565b6001600160a01b0382166103b15760405163ec442f0560e01b81526000600482015260240161033f565b6102d48383836104c7565b6001600160a01b0382166103e65760405163ec442f0560e01b81526000600482015260240161033f565b6102a6600083836104c7565b6001600160a01b03841661041c5760405163e602df0560e01b81526000600482015260240161033f565b6001600160a01b03831661044657604051634a1406b160e11b81526000600482015260240161033f565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561035757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104b991815260200190565b60405180910390a350505050565b6001600160a01b0383166104f25780600260008282546104e79190610751565b909155506105649050565b6001600160a01b038316600090815260208190526040902054818110156105455760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161033f565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166105805760028054829003905561059f565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516105e491815260200190565b60405180910390a3505050565b602081526000825180602084015260005b8181101561061f5760208186018101516040868401015201610602565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b038116811461065657600080fd5b919050565b6000806040838503121561066e57600080fd5b6106778361063f565b946020939093013593505050565b60008060006060848603121561069a57600080fd5b6106a38461063f565b92506106b16020850161063f565b929592945050506040919091013590565b6000602082840312156106d457600080fd5b6106dd8261063f565b9392505050565b600080604083850312156106f757600080fd5b6107008361063f565b915061070e6020840161063f565b90509250929050565b600181811c9082168061072b57607f821691505b60208210810361074b57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561027257634e487b7160e01b600052601160045260246000fdfea264697066735822122024816bf26dbdf23873636ac7275656d0fa3d36e451ead3a74030c30b34ff58e564736f6c634300081b0033";

type SimpleERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleERC20__factory extends ContractFactory {
  constructor(...args: SimpleERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimal: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, symbol, decimal, overrides || {});
  }
  override deploy(
    name: string,
    symbol: string,
    decimal: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, symbol, decimal, overrides || {}) as Promise<
      SimpleERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SimpleERC20__factory {
    return super.connect(runner) as SimpleERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleERC20Interface {
    return new Interface(_abi) as SimpleERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): SimpleERC20 {
    return new Contract(address, _abi, runner) as unknown as SimpleERC20;
  }
}
